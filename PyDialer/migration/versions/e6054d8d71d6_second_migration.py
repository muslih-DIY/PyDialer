"""second migration

Revision ID: e6054d8d71d6
Revises: 
Create Date: 2022-12-15 23:09:09.077569

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e6054d8d71d6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('extensions',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('context', sa.String(length=40), nullable=False),
    sa.Column('exten', sa.String(length=40), nullable=False),
    sa.Column('app', sa.String(length=40), nullable=False),
    sa.Column('appdata', sa.String(length=256), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('context', 'exten', 'priority', name='cont_ext_pr_unq')
    )
    op.create_table('ps_aors',
    sa.Column('id', sa.String(length=40), nullable=False),
    sa.Column('remove_unavailable', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('qualify_frequency', sa.Integer(), nullable=True),
    sa.Column('authenticate_qualify', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('maximum_expiration', sa.Integer(), nullable=True),
    sa.Column('support_path', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('qualify_timeout', sa.FLOAT(), nullable=True),
    sa.Column('default_expiration', sa.Integer(), nullable=True),
    sa.Column('max_contacts', sa.Integer(), nullable=True),
    sa.Column('minimum_expiration', sa.Integer(), nullable=True),
    sa.Column('remove_existing', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('contact', sa.String(length=255), nullable=True),
    sa.Column('mailboxes', sa.String(length=80), nullable=True),
    sa.Column('outbound_proxy', sa.String(length=40), nullable=True),
    sa.Column('voicemail_extension', sa.String(length=40), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ps_auths',
    sa.Column('id', sa.String(length=40), nullable=False),
    sa.Column('nonce_lifetime', sa.Integer(), nullable=True),
    sa.Column('auth_type', postgresql.ENUM('md5', 'userpass', 'google_oauth', name='pjsip_auth_type_values_v2'), nullable=True),
    sa.Column('password', sa.String(length=80), nullable=True),
    sa.Column('realm', sa.String(length=40), nullable=True),
    sa.Column('username', sa.String(length=40), nullable=True),
    sa.Column('refresh_token', sa.String(length=255), nullable=True),
    sa.Column('oauth_clientid', sa.String(length=255), nullable=True),
    sa.Column('oauth_secret', sa.String(length=255), nullable=True),
    sa.Column('md5_cred', sa.String(length=40), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ps_contacts',
    sa.Column('id', sa.String(length=255), nullable=False),
    sa.Column('prune_on_boot', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('expiration_time', sa.BigInteger(), nullable=True),
    sa.Column('qualify_frequency', sa.Integer(), nullable=True),
    sa.Column('qualify_timeout', sa.FLOAT(), nullable=True),
    sa.Column('authenticate_qualify', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('via_port', sa.Integer(), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('call_id', sa.String(length=255), nullable=True),
    sa.Column('reg_server', sa.String(length=255), nullable=True),
    sa.Column('endpoint', sa.String(length=40), nullable=True),
    sa.Column('uri', sa.String(length=511), nullable=True),
    sa.Column('via_addr', sa.String(length=40), nullable=True),
    sa.Column('outbound_proxy', sa.String(length=40), nullable=True),
    sa.Column('path', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ps_endpoint_id_ips',
    sa.Column('id', sa.String(length=40), nullable=False),
    sa.Column('srv_lookups', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('endpoint', sa.String(length=40), nullable=True),
    sa.Column('match', sa.String(length=80), nullable=True),
    sa.Column('match_header', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ps_endpoints',
    sa.Column('id', sa.String(length=40), nullable=False),
    sa.Column('use_avpf', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('redirect_method', postgresql.ENUM('user', 'uri_core', 'uri_pjsip', name='pjsip_redirect_method_values'), nullable=True),
    sa.Column('media_encryption', postgresql.ENUM('no', 'sdes', 'dtls', name='pjsip_media_encryption_values'), nullable=True),
    sa.Column('cos_audio', sa.Integer(), nullable=True),
    sa.Column('cos_video', sa.Integer(), nullable=True),
    sa.Column('inband_progress', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('force_avp', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('media_use_received_transport', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('ice_support', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('user_eq_phone', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('moh_passthrough', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('media_encryption_optimistic', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('rpid_immediate', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('g726_non_standard', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('rtp_keepalive', sa.Integer(), nullable=True),
    sa.Column('rtp_timeout', sa.Integer(), nullable=True),
    sa.Column('rtp_timeout_hold', sa.Integer(), nullable=True),
    sa.Column('bind_rtp_to_media_address', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('connected_line_method', postgresql.ENUM('invite', 'reinvite', 'update', name='pjsip_connected_line_method_values'), nullable=True),
    sa.Column('mwi_subscribe_replaces_unsolicited', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('direct_media_method', postgresql.ENUM('invite', 'reinvite', 'update', name='pjsip_connected_line_method_values'), nullable=True),
    sa.Column('direct_media_glare_mitigation', postgresql.ENUM('none', 'outgoing', 'incoming', name='pjsip_direct_media_glare_mitigation_values'), nullable=True),
    sa.Column('device_state_busy_at', sa.Integer(), nullable=True),
    sa.Column('fax_detect', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('t38_udptl', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('t38_udptl_ec', postgresql.ENUM('none', 'fec', 'redundancy', name='pjsip_t38udptl_ec_values'), nullable=True),
    sa.Column('t38_udptl_maxdatagram', sa.Integer(), nullable=True),
    sa.Column('fax_detect_timeout', sa.Integer(), nullable=True),
    sa.Column('t38_udptl_nat', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('preferred_codec_only', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('asymmetric_rtp_codec', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('rtcp_mux', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('allow_overlap', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('refer_blind_progress', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('notify_early_inuse_ringing', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('max_audio_streams', sa.Integer(), nullable=True),
    sa.Column('max_video_streams', sa.Integer(), nullable=True),
    sa.Column('webrtc', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('dtls_fingerprint', postgresql.ENUM('SHA-1', 'SHA-256', name='sha_hash_values'), nullable=True),
    sa.Column('t38_udptl_ipv6', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('bundle', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('dtls_auto_generate_cert', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('follow_early_media_fork', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('accept_multiple_sdp_answers', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('suppress_q850_reason_headers', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('trust_connected_line', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('send_connected_line', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('ignore_183_without_sdp', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('disable_direct_media_on_nat', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('dtmf_mode', postgresql.ENUM('rfc4733', 'inband', 'info', 'auto', 'auto_info', name='pjsip_dtmf_mode_values_v3'), nullable=True),
    sa.Column('one_touch_recording', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('rewrite_contact', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('stir_shaken', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('send_history_info', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('allow_unauthenticated_options', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('t38_bind_udptl_to_media_address', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('rtp_ipv6', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('rtp_symmetric', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('allow_transfer', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('allow_subscribe', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('send_diversion', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('send_pai', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('send_rpid', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('timers_min_se', sa.Integer(), nullable=True),
    sa.Column('sub_min_expiry', sa.Integer(), nullable=True),
    sa.Column('timers', postgresql.ENUM('forced', 'no', 'required', 'yes', name='pjsip_timer_values'), nullable=True),
    sa.Column('timers_sess_expires', sa.Integer(), nullable=True),
    sa.Column('direct_media', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('callerid_privacy', postgresql.ENUM('allowed_not_screened', 'allowed_passed_screened', 'allowed_failed_screened', 'allowed', 'prohib_not_screened', 'prohib_passed_screened', 'prohib_failed_screened', 'prohib', 'unavailable', name='pjsip_cid_privacy_values'), nullable=True),
    sa.Column('force_rport', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('100rel', postgresql.ENUM('no', 'required', 'yes', name='pjsip_100rel_values'), nullable=True),
    sa.Column('aggregate_mwi', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('trust_id_inbound', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('trust_id_outbound', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('use_ptime', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('dtls_setup', postgresql.ENUM('active', 'passive', 'actpass', name='pjsip_dtls_setup_values'), nullable=True),
    sa.Column('srtp_tag_32', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('geoloc_outgoing_call_profile', sa.String(length=80), nullable=True),
    sa.Column('transport', sa.String(length=40), nullable=True),
    sa.Column('aors', sa.String(length=200), nullable=True),
    sa.Column('auth', sa.String(length=40), nullable=True),
    sa.Column('context', sa.String(length=40), nullable=True),
    sa.Column('disallow', sa.String(length=200), nullable=True),
    sa.Column('allow', sa.String(length=200), nullable=True),
    sa.Column('external_media_address', sa.String(length=40), nullable=True),
    sa.Column('identify_by', sa.String(length=80), nullable=True),
    sa.Column('mailboxes', sa.String(length=40), nullable=True),
    sa.Column('moh_suggest', sa.String(length=40), nullable=True),
    sa.Column('outbound_auth', sa.String(length=40), nullable=True),
    sa.Column('outbound_proxy', sa.String(length=40), nullable=True),
    sa.Column('callerid', sa.String(length=40), nullable=True),
    sa.Column('callerid_tag', sa.String(length=40), nullable=True),
    sa.Column('call_group', sa.String(length=40), nullable=True),
    sa.Column('pickup_group', sa.String(length=40), nullable=True),
    sa.Column('named_call_group', sa.String(length=40), nullable=True),
    sa.Column('named_pickup_group', sa.String(length=40), nullable=True),
    sa.Column('tone_zone', sa.String(length=40), nullable=True),
    sa.Column('language', sa.String(length=40), nullable=True),
    sa.Column('record_on_feature', sa.String(length=40), nullable=True),
    sa.Column('record_off_feature', sa.String(length=40), nullable=True),
    sa.Column('rtp_engine', sa.String(length=40), nullable=True),
    sa.Column('sdp_owner', sa.String(length=40), nullable=True),
    sa.Column('sdp_session', sa.String(length=40), nullable=True),
    sa.Column('tos_audio', sa.String(length=10), nullable=True),
    sa.Column('tos_video', sa.String(length=10), nullable=True),
    sa.Column('from_domain', sa.String(length=40), nullable=True),
    sa.Column('from_user', sa.String(length=40), nullable=True),
    sa.Column('mwi_from_user', sa.String(length=40), nullable=True),
    sa.Column('dtls_verify', sa.String(length=40), nullable=True),
    sa.Column('dtls_rekey', sa.String(length=40), nullable=True),
    sa.Column('dtls_cert_file', sa.String(length=200), nullable=True),
    sa.Column('dtls_private_key', sa.String(length=200), nullable=True),
    sa.Column('dtls_cipher', sa.String(length=200), nullable=True),
    sa.Column('dtls_ca_file', sa.String(length=200), nullable=True),
    sa.Column('dtls_ca_path', sa.String(length=200), nullable=True),
    sa.Column('media_address', sa.String(length=40), nullable=True),
    sa.Column('set_var', sa.TEXT(), nullable=True),
    sa.Column('message_context', sa.String(length=40), nullable=True),
    sa.Column('accountcode', sa.String(length=80), nullable=True),
    sa.Column('voicemail_extension', sa.String(length=40), nullable=True),
    sa.Column('deny', sa.String(length=95), nullable=True),
    sa.Column('permit', sa.String(length=95), nullable=True),
    sa.Column('acl', sa.String(length=40), nullable=True),
    sa.Column('contact_deny', sa.String(length=95), nullable=True),
    sa.Column('contact_permit', sa.String(length=95), nullable=True),
    sa.Column('contact_acl', sa.String(length=40), nullable=True),
    sa.Column('subscribe_context', sa.String(length=40), nullable=True),
    sa.Column('contact_user', sa.String(length=80), nullable=True),
    sa.Column('incoming_mwi_mailbox', sa.String(length=40), nullable=True),
    sa.Column('codec_prefs_incoming_offer', sa.String(length=128), nullable=True),
    sa.Column('codec_prefs_outgoing_offer', sa.String(length=128), nullable=True),
    sa.Column('codec_prefs_incoming_answer', sa.String(length=128), nullable=True),
    sa.Column('codec_prefs_outgoing_answer', sa.String(length=128), nullable=True),
    sa.Column('geoloc_incoming_call_profile', sa.String(length=80), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ps_registrations',
    sa.Column('id', sa.String(length=40), nullable=False),
    sa.Column('max_random_initial_delay', sa.Integer(), nullable=True),
    sa.Column('auth_rejection_permanent', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('expiration', sa.Integer(), nullable=True),
    sa.Column('max_retries', sa.Integer(), nullable=True),
    sa.Column('retry_interval', sa.Integer(), nullable=True),
    sa.Column('forbidden_retry_interval', sa.Integer(), nullable=True),
    sa.Column('support_path', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('fatal_retry_interval', sa.Integer(), nullable=True),
    sa.Column('line', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('support_outbound', postgresql.ENUM('0', '1', 'off', 'on', 'false', 'true', 'no', 'yes', name='ast_bool_values'), nullable=True),
    sa.Column('server_uri', sa.String(length=255), nullable=True),
    sa.Column('client_uri', sa.String(length=255), nullable=True),
    sa.Column('contact_user', sa.String(length=40), nullable=True),
    sa.Column('transport', sa.String(length=40), nullable=True),
    sa.Column('endpoint', sa.String(length=40), nullable=True),
    sa.Column('outbound_auth', sa.String(length=40), nullable=True),
    sa.Column('outbound_proxy', sa.String(length=40), nullable=True),
    sa.Column('contact_header_params', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ps_transports',
    sa.Column('id', sa.String(length=40), nullable=False),
    sa.Column('external_signaling_port', sa.Integer(), nullable=True),
    sa.Column('method', postgresql.ENUM('default', 'unspecified', 'tlsv1', 'sslv2', 'sslv3', 'sslv23', name='pjsip_transport_method_values'), nullable=True),
    sa.Column('protocol', postgresql.ENUM('udp', 'tcp', 'tls', 'ws', 'wss', 'flow', name='pjsip_transport_protocol_values_v2'), nullable=True),
    sa.Column('require_client_cert', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('verify_client', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('verify_server', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('async_operations', sa.Integer(), nullable=True),
    sa.Column('cos', sa.Integer(), nullable=True),
    sa.Column('allow_reload', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('symmetric_transport', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('allow_wildcard_certs', postgresql.ENUM('yes', 'no', name='yesno_values'), nullable=True),
    sa.Column('tos', sa.String(length=10), nullable=True),
    sa.Column('local_net', sa.String(length=40), nullable=True),
    sa.Column('bind', sa.String(length=40), nullable=True),
    sa.Column('ca_list_file', sa.String(length=200), nullable=True),
    sa.Column('cert_file', sa.String(length=200), nullable=True),
    sa.Column('cipher', sa.String(length=200), nullable=True),
    sa.Column('domain', sa.String(length=40), nullable=True),
    sa.Column('external_media_address', sa.String(length=40), nullable=True),
    sa.Column('external_signaling_address', sa.String(length=40), nullable=True),
    sa.Column('password', sa.String(length=40), nullable=True),
    sa.Column('priv_key_file', sa.String(length=200), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('protocol', 'bind', name='bind_proto_unq')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ps_transports')
    op.drop_table('ps_registrations')
    op.drop_table('ps_endpoints')
    op.drop_table('ps_endpoint_id_ips')
    op.drop_table('ps_contacts')
    op.drop_table('ps_auths')
    op.drop_table('ps_aors')
    op.drop_table('extensions')

    op.execute("DROP TYPE  IF EXISTS ast_bool_values")
    op.execute("DROP TYPE  IF EXISTS iax_encryption_values")
    op.execute("DROP TYPE  IF EXISTS iax_requirecalltoken_values")
    op.execute("DROP TYPE  IF EXISTS iax_transfer_values")
    op.execute("DROP TYPE  IF EXISTS moh_mode_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_100rel_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_auth_type_values_v2")
    op.execute("DROP TYPE  IF EXISTS pjsip_cid_privacy_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_connected_line_method_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_direct_media_glare_mitigation_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_dtls_setup_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_dtmf_mode_values_v3")
    op.execute("DROP TYPE  IF EXISTS pjsip_media_encryption_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_redirect_method_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_t38udptl_ec_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_taskprocessor_overload_trigger_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_timer_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_transport_method_values")
    op.execute("DROP TYPE  IF EXISTS pjsip_transport_protocol_values_v2")
    op.execute("DROP TYPE  IF EXISTS queue_autopause_values")
    op.execute("DROP TYPE  IF EXISTS queue_strategy_values")
    op.execute("DROP TYPE  IF EXISTS sha_hash_values")
    op.execute("DROP TYPE  IF EXISTS sip_callingpres_values")
    op.execute("DROP TYPE  IF EXISTS sip_directmedia_values_v2")
    op.execute("DROP TYPE  IF EXISTS sip_dtmfmode_values")
    op.execute("DROP TYPE  IF EXISTS sip_progressinband_values")
    op.execute("DROP TYPE  IF EXISTS sip_session_refresher_values")
    op.execute("DROP TYPE  IF EXISTS sip_session_timers_values")
    op.execute("DROP TYPE  IF EXISTS sip_transport_values")
    op.execute("DROP TYPE  IF EXISTS type_values")
    op.execute("DROP TYPE  IF EXISTS yes_no_values")
    op.execute("DROP TYPE  IF EXISTS yesno_values")
    # ### end Alembic commands ###
